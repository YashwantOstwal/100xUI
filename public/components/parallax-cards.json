{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "parallax-cards",
  "type": "registry:block",
  "title": "Parallax cards",
  "description": "A reusable and responsive component that gives each of its children a smooth parallax effect, adding a modern, interactive touch to your website. Perfect for showcasing lists of content blocks, feature cards, or image galleries.",
  "dependencies": [
    "clsx",
    "tw-merge",
    "motion"
  ],
  "files": [
    {
      "path": "components/(package)/parallax-cards/parallax-cards.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport {\r\n  useScroll,\r\n  useTransform,\r\n  motion,\r\n  type MotionValue,\r\n} from \"motion/react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nexport interface ParallaxCardsProps\r\n  extends React.ComponentPropsWithoutRef<\"div\"> {\r\n  children: React.ReactElement[];\r\n  maxStackedCards?: number;\r\n  top?: React.CSSProperties[\"top\"];\r\n  forceParallax?: boolean;\r\n}\r\n\r\nexport function ParallaxCards({\r\n  maxStackedCards = 3,\r\n  top = \"50px\",\r\n  forceParallax = false,\r\n  className,\r\n  style,\r\n  children,\r\n  ...rest\r\n}: ParallaxCardsProps) {\r\n  const totalCards = children.length;\r\n  const topMagnitude = parseFloat(String(top));\r\n  const topUnit = String(top).slice(String(topMagnitude).length) || \"px\";\r\n\r\n  if (topUnit === \"%\")\r\n    throw new Error(\r\n      \"Invalid `top` value: percentages (%) are not supported by <ParallaxCards/>.\",\r\n    );\r\n  const containerRef = React.useRef<HTMLDivElement>(null);\r\n  const [isSticky, setIsSticky] = React.useState(true);\r\n\r\n  const { scrollYProgress } = useScroll({\r\n    target: containerRef,\r\n    offset: [\"start start\", \"end start\"],\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (forceParallax) return;\r\n\r\n    const element = containerRef.current;\r\n    if (!element) return;\r\n\r\n    const handleResize = () => {\r\n      const cardHeight = element.getBoundingClientRect().height / totalCards;\r\n      const viewportHeight =\r\n        window.visualViewport?.height ?? window.innerHeight;\r\n      setIsSticky(viewportHeight >= cardHeight);\r\n    };\r\n\r\n    handleResize();\r\n    window.visualViewport?.addEventListener(\"resize\", handleResize);\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n      window.visualViewport?.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, [totalCards, forceParallax]);\r\n\r\n  return (\r\n    <>\r\n      <style>{`\r\n        html {\r\n          scroll-behavior: smooth;\r\n        }\r\n      `}</style>\r\n\r\n      <div\r\n        ref={containerRef}\r\n        className={cn(\"w-full\", className, \"!relative !grid !py-0\")}\r\n        style={{\r\n          ...style,\r\n          gridTemplateRows: `repeat(${totalCards}, 1fr)`,\r\n        }}\r\n        {...rest}\r\n      >\r\n        {children.map((child, index) => (\r\n          <ParallaxCard\r\n            key={`cards[${index}]`}\r\n            index={index}\r\n            scrollYProgress={scrollYProgress}\r\n            scrollRatio={1 / totalCards}\r\n            maxStackedCards={maxStackedCards}\r\n            top={{\r\n              magnitude: topMagnitude,\r\n              unit: topUnit,\r\n              absolute: topMagnitude + topUnit,\r\n            }}\r\n            isSticky={isSticky}\r\n            forceParallax={forceParallax}\r\n          >\r\n            {child}\r\n          </ParallaxCard>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\ninterface CardProps {\r\n  index: number;\r\n  scrollYProgress: MotionValue<number>;\r\n  scrollRatio: number;\r\n  children: React.ReactElement;\r\n  isSticky: boolean;\r\n  maxStackedCards: number;\r\n  top: {\r\n    magnitude: number;\r\n    unit: string;\r\n    absolute: string;\r\n  };\r\n  forceParallax: boolean;\r\n}\r\n\r\nfunction ParallaxCard({\r\n  index,\r\n  scrollYProgress,\r\n  maxStackedCards,\r\n  scrollRatio,\r\n  children,\r\n  top,\r\n  isSticky,\r\n  forceParallax,\r\n}: CardProps) {\r\n  const y = useTransform(\r\n    scrollYProgress,\r\n    [\r\n      index * scrollRatio,\r\n      (index + maxStackedCards - 1) * scrollRatio,\r\n      (index + maxStackedCards) * scrollRatio,\r\n    ],\r\n    [\r\n      \"0\",\r\n      `-${top.absolute}`,\r\n      `${-top.magnitude - top.magnitude / (maxStackedCards - 1)}${top.unit}`,\r\n    ],\r\n  );\r\n\r\n  const scale = useTransform(\r\n    scrollYProgress,\r\n    [index * scrollRatio, (index + maxStackedCards) * scrollRatio],\r\n    [1, 0.85],\r\n  );\r\n\r\n  const opacity = useTransform(\r\n    scrollYProgress,\r\n    [\r\n      (index + maxStackedCards - 1) * scrollRatio,\r\n      (index + maxStackedCards) * scrollRatio,\r\n    ],\r\n    [1, 0],\r\n  );\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        paddingTop: top.absolute,\r\n        position: isSticky ? \"sticky\" : \"relative\",\r\n        top: \"0px\",\r\n      }}\r\n    >\r\n      <motion.div\r\n        {...(isSticky && {\r\n          style: {\r\n            scale,\r\n            opacity,\r\n            y,\r\n            maxHeight: forceParallax ? `calc(100vh - ${top.absolute})` : \"none\",\r\n          },\r\n        })}\r\n        className=\"grid size-full origin-top overflow-hidden\"\r\n      >\r\n        {children}\r\n      </motion.div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n",
      "type": "registry:lib"
    }
  ]
}