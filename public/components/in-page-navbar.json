{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "in-page-navbar",
  "type": "registry:block",
  "title": "In-page navbar",
  "description": "A smart, fully responsive, and accessible navigation bar that tracks section progress as you scroll, providing a clear visual indicator of your journey through the page. Best suited for single-page layouts where all content lives on a single page.",
  "dependencies": [
    "motion",
    "clsx",
    "tw-merge",
    "lucide-react"
  ],
  "files": [
    {
      "path": "components/(package)/in-page-navbar/in-page-navbar.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport {\r\n  AnimatePresence,\r\n  motion,\r\n  useScroll,\r\n  useTransform,\r\n  type Variants,\r\n  type MotionValue,\r\n} from \"motion/react\";\r\nimport { EqualIcon, XIcon } from \"lucide-react\";\r\n\r\nimport { useIsServer } from \"@/hooks/use-is-server\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst fadeVariants: Variants = {\r\n  fadeIn: { opacity: 1 },\r\n  fadeOut: { opacity: 0 },\r\n};\r\n\r\ninterface NavSection extends Omit<React.ComponentProps<\"a\">, \"href\"> {\r\n  label: string;\r\n  id: string;\r\n}\r\n\r\nexport interface InPageNavbarProps extends React.ComponentProps<\"div\"> {\r\n  logo: React.ReactElement;\r\n  sections: NavSection[];\r\n}\r\n\r\nexport function InPageNavbar({\r\n  logo,\r\n  sections,\r\n  className,\r\n  ...rest\r\n}: InPageNavbarProps) {\r\n  const [isSidebarOpen, setIsSidebarOpen] = React.useState(false);\r\n  const [isSmallScreen, setIsSmallScreen] = React.useState(false);\r\n\r\n  const isServer = useIsServer();\r\n\r\n  const navButtons = (\r\n    <NavButtonGroup\r\n      sections={sections}\r\n      isServer={isServer}\r\n      className=\"gap-x-1.5 gap-y-1 max-sm:mx-auto max-sm:grid max-sm:max-w-fit max-sm:grid-rows-3 max-sm:py-8 max-sm:text-sm sm:flex sm:items-center\"\r\n    />\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    const handleMediaQuery = ({ matches }: { matches: boolean }) =>\r\n      setIsSmallScreen(matches);\r\n\r\n    const mediaQuery = window.matchMedia(\"(max-width:639px)\");\r\n    mediaQuery.addEventListener(\"change\", handleMediaQuery);\r\n\r\n    return () => mediaQuery.removeEventListener(\"change\", handleMediaQuery);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={cn(\r\n          \"pointer-events-none fixed inset-x-4.5 top-1.5 z-[100]\",\r\n          \"[&_a,button]:focus-visible:ring-offset-background [&_a,button]:focus-visible:ring-ring [&_a,button]:transition-opacity [&_a,button]:duration-150 [&_a,button]:ease-out [&_a,button]:hover:opacity-70 [&_a,button]:focus-visible:opacity-70 [&_a,button]:focus-visible:ring-1 [&_a,button]:focus-visible:ring-offset-1 [&_a,button]:focus-visible:outline-0\",\r\n          className,\r\n        )}\r\n        {...rest}\r\n      >\r\n        <motion.div\r\n          initial={false}\r\n          animate={isSidebarOpen && isSmallScreen ? \"fadeOut\" : \"fadeIn\"}\r\n          variants={fadeVariants}\r\n          className=\"bg-card/85 inset-shadow-border/40 pointer-events-auto mx-auto flex max-w-xl items-center justify-between rounded-lg p-3 text-sm font-medium shadow-md inset-shadow-2xs backdrop-blur-[2px] sm:rounded-xl\"\r\n        >\r\n          <a\r\n            href=\"#\"\r\n            tabIndex={1}\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              window.history.pushState(null, \"\", window.location.pathname);\r\n              window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n            }}\r\n            className=\"rounded-full p-0.5\"\r\n          >\r\n            {logo}\r\n          </a>\r\n          <>\r\n            <nav className=\"hidden sm:block\">{navButtons}</nav>\r\n            <button\r\n              tabIndex={2}\r\n              aria-label=\"Open sidebar\"\r\n              onClick={() => {\r\n                setIsSmallScreen(true);\r\n                setIsSidebarOpen(true);\r\n              }}\r\n              className=\"text-foreground -mr-2 cursor-pointer rounded-full px-1 sm:hidden\"\r\n            >\r\n              <EqualIcon />\r\n            </button>\r\n          </>\r\n        </motion.div>\r\n      </div>\r\n      <AnimatePresence>\r\n        {isSmallScreen && isSidebarOpen && (\r\n          <motion.div\r\n            initial=\"fadeOut\"\r\n            animate=\"fadeIn\"\r\n            exit=\"fadeOut\"\r\n            variants={fadeVariants}\r\n            className=\"bg-card/85 inset-shadow-border/40 [&_a,button]:focus-visible:ring-offset-background [&_a,button]:focus-visible:ring-ring fixed inset-x-4.5 top-1.5 z-[110] overflow-hidden rounded-lg shadow-md inset-shadow-2xs backdrop-blur-[2px] [&_a,button]:transition-opacity [&_a,button]:duration-150 [&_a,button]:ease-out [&_a,button]:hover:opacity-70 [&_a,button]:focus-visible:opacity-70 [&_a,button]:focus-visible:ring-1 [&_a,button]:focus-visible:ring-offset-1 [&_a,button]:focus-visible:outline-0\"\r\n          >\r\n            <button\r\n              tabIndex={3}\r\n              aria-label=\"Close sidebar\"\r\n              onClick={() => setIsSidebarOpen(false)}\r\n              className=\"text-foreground absolute top-3 right-2 cursor-pointer rounded-full\"\r\n            >\r\n              <XIcon />\r\n            </button>\r\n            {navButtons}\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n    </>\r\n  );\r\n}\r\n\r\ninterface NavButtonGroupProps {\r\n  sections: NavSection[];\r\n  isServer: boolean;\r\n  className: string;\r\n}\r\n\r\nfunction NavButtonGroup({\r\n  sections,\r\n  isServer,\r\n  className,\r\n}: NavButtonGroupProps) {\r\n  const { scrollY } = useScroll();\r\n\r\n  return (\r\n    <nav className={className}>\r\n      {sections.map((props) => (\r\n        <NavItem\r\n          key={props.id}\r\n          scrollY={scrollY}\r\n          isServer={isServer}\r\n          {...props}\r\n        />\r\n      ))}\r\n    </nav>\r\n  );\r\n}\r\n\r\ninterface NavItemProps extends NavSection {\r\n  scrollY: MotionValue<number>;\r\n  isServer: boolean;\r\n}\r\n\r\nfunction NavItem({\r\n  label,\r\n  id,\r\n  isServer,\r\n  scrollY,\r\n  onClick,\r\n  className,\r\n  ...rest\r\n}: NavItemProps) {\r\n  const [targetElement, setTargetElement] = React.useState<HTMLElement | null>(\r\n    null,\r\n  );\r\n\r\n  const sectionProgress = useTransform(scrollY, (latest) => {\r\n    if (isServer || !targetElement) return 0;\r\n\r\n    const viewportHeight = window.innerHeight;\r\n    const targetElementTop = targetElement.offsetTop;\r\n    const targetElementHeight = targetElement.offsetHeight;\r\n\r\n    const visibleRatio =\r\n      (latest + viewportHeight - targetElementTop) / targetElementHeight;\r\n\r\n    return Math.min(1, Math.max(visibleRatio, 0));\r\n  });\r\n\r\n  const clipPath = useTransform(\r\n    sectionProgress,\r\n    [0, 1],\r\n    [\"inset(0% 100% 0% 0%)\", \"inset(0% 0% 0% 0%)\"],\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    const element = document.getElementById(id);\r\n    if (!element) {\r\n      throw new Error(`No section found with id=\"${id}\".`);\r\n    }\r\n    setTargetElement(element);\r\n  }, [id]);\r\n\r\n  return (\r\n    <a\r\n      tabIndex={2}\r\n      {...rest}\r\n      href={`#${id}`}\r\n      onClick={(e) => {\r\n        e.preventDefault();\r\n        window.history.pushState(null, \"\", `#${id}`);\r\n        targetElement?.scrollIntoView({ behavior: \"smooth\" });\r\n        onClick?.(e);\r\n      }}\r\n      className={cn(\r\n        \"bg-background text-foreground border-border relative overflow-hidden rounded-full border font-medium capitalize transition-opacity duration-150 ease-out sm:text-xs\",\r\n        className,\r\n      )}\r\n    >\r\n      <span className=\"relative z-20 inline-block size-full px-4 py-2.5 text-center leading-none sm:px-3 sm:py-2\">\r\n        {label}\r\n      </span>\r\n\r\n      {targetElement && (\r\n        <motion.span\r\n          initial=\"fadeOut\"\r\n          animate=\"fadeIn\"\r\n          variants={fadeVariants}\r\n          style={{ clipPath }}\r\n          className=\"bg-muted text-muted-foreground absolute -inset-0.5 z-30 grid place-items-center rounded-[inherit] leading-none\"\r\n        >\r\n          {label}\r\n        </motion.span>\r\n      )}\r\n    </a>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n",
      "type": "registry:lib"
    },
    {
      "path": "hooks/use-is-server.ts",
      "content": "import React from \"react\";\r\n\r\nexport function useIsServer() {\r\n  const isServer = React.useRef(typeof window === \"undefined\");\r\n  return isServer.current;\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}