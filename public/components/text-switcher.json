{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "text-switcher",
  "type": "registry:block",
  "title": "Text switcher",
  "description": "A reusable component that creates an engaging animation effect by smoothly transitioning between a list of phrases. The animation, driven by a moving dot, makes it ideal for dynamically completing a sentence or tagline.",
  "dependencies": [
    "motion",
    "clsx",
    "tw-merge"
  ],
  "files": [
    {
      "path": "components/(package)/text-switcher/text-switcher.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport {\r\n  AnimatePresence,\r\n  motion,\r\n  useMotionValue,\r\n  useTransform,\r\n  useVelocity,\r\n} from \"motion/react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nexport interface TextSwitcherProps {\r\n  phrases: string[];\r\n  readTimeInSec?: number;\r\n  animationDurationInSec?: number;\r\n  className?: string;\r\n  style?: React.CSSProperties;\r\n}\r\n\r\nconst letterVariants = {\r\n  initial: { scaleX: 0, opacity: 0 },\r\n  animate: { scaleX: 1, opacity: 1 },\r\n  exit: { scaleX: 0, opacity: 0 },\r\n};\r\n\r\nexport function TextSwitcher({\r\n  phrases,\r\n  animationDurationInSec = 0.4,\r\n  readTimeInSec = 2,\r\n  className,\r\n  style,\r\n}: TextSwitcherProps) {\r\n  const [currentPhrase, setCurrentPhrase] = React.useState(0);\r\n\r\n  const dotLeft = useMotionValue(\"100%\");\r\n  const dotLeftAsFloat = useTransform(dotLeft, (latest) => parseFloat(latest));\r\n  const dotVelocity = useVelocity(dotLeftAsFloat);\r\n\r\n  const dotScaleX = useTransform(dotVelocity, [-120, 0, 120], [3, 1, 3]);\r\n  const dotColor = useTransform(dotVelocity, (latest) => {\r\n    return Math.round(latest) !== 0 ? \"var(--color-destructive)\" : \"\";\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    const totalCycleTimeInMs =\r\n      (readTimeInSec + 2 * animationDurationInSec) * 1000;\r\n    const controlInterval = setInterval(() => {\r\n      setCurrentPhrase((prevIndex) => (prevIndex + 1) % phrases.length);\r\n    }, totalCycleTimeInMs);\r\n\r\n    return () => clearInterval(controlInterval);\r\n  }, [phrases.length, readTimeInSec, animationDurationInSec]);\r\n\r\n  const containerVariants = {\r\n    animate: {\r\n      transition: {\r\n        staggerChildren: animationDurationInSec / phrases[currentPhrase].length,\r\n      },\r\n    },\r\n    exit: {\r\n      transition: {\r\n        staggerChildren: animationDurationInSec / phrases[currentPhrase].length,\r\n        staggerDirection: -1,\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={cn(\"inline-block\", className, \"!relative\")}\r\n      style={{ ...style }}\r\n    >\r\n      <AnimatePresence initial={false} mode=\"wait\">\r\n        <motion.div\r\n          key={currentPhrase}\r\n          className=\"flex flex-nowrap whitespace-pre\"\r\n          variants={containerVariants}\r\n          initial=\"initial\"\r\n          animate=\"animate\"\r\n          exit=\"exit\"\r\n        >\r\n          {phrases[currentPhrase].split(\"\").map((letter, i) => (\r\n            <motion.div\r\n              key={`phrases[${currentPhrase}][${i}]`}\r\n              className=\"origin-left\"\r\n              variants={letterVariants}\r\n              transition={{\r\n                duration:\r\n                  animationDurationInSec / phrases[currentPhrase].length,\r\n              }}\r\n            >\r\n              {letter}\r\n            </motion.div>\r\n          ))}\r\n        </motion.div>\r\n      </AnimatePresence>\r\n      <AnimatePresence initial={false} mode=\"wait\">\r\n        <motion.div\r\n          key={`phrases[${currentPhrase}].dot`}\r\n          style={{ left: dotLeft, scaleX: dotScaleX, color: dotColor }}\r\n          className=\"absolute inset-y-0\"\r\n          variants={{\r\n            initial: { left: \"0%\" },\r\n            animate: {\r\n              left: \"100%\",\r\n              transformOrigin: \"100% 50%\",\r\n              transition: {\r\n                duration: animationDurationInSec,\r\n                ease: [0.33, 1, 0.68, 1],\r\n              },\r\n            },\r\n            exit: {\r\n              left: \"0%\",\r\n              transformOrigin: \"0% 50%\",\r\n              transition: {\r\n                duration: animationDurationInSec,\r\n                ease: [0.32, 0, 0.67, 0],\r\n              },\r\n            },\r\n          }}\r\n          initial=\"initial\"\r\n          animate=\"animate\"\r\n          exit=\"exit\"\r\n        >\r\n          .\r\n        </motion.div>\r\n      </AnimatePresence>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n",
      "type": "registry:lib"
    }
  ]
}